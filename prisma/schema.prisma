// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  workspaces    Workspace[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
model Workspace{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  projects Project[]
  endpoints Endpoint[]
  
  @@map("workspace")
}

model Project{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String @db.ObjectId
  endpoints Endpoint[]
  
  @@map("project")
}

model Endpoint{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  path String
  method String
  description String
  queryParams String[]
  pathParams String[]
  headers String[]
  requestBody String
  responseBody String
  statusCode Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String @db.ObjectId
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String @db.ObjectId
  
  @@map("endpoint")
}